kafka:
  bootstrapServers: 192.168.1.105:9092 #服务器地址指定
  groupId: g7 #配置消费者组
  enableAutoCommit: false #配置是否自动确认offset;true自动提交，false手动提交。
  keyDeserializer: org.apache.kafka.common.serialization.StringDeserializer # key和value 序列化
  valuDeserializer: org.apache.kafka.common.serialization.StringDeserializer
  acks: all #发送消息是否应答
  autoOffsetReset: latest #auto.offset.reset "latest", "earliest", "none"
  timeOutMs: 100
  maxPollRecords: 1

#  partitionAssignmentStrategy: org.apache.kafka.clients.consumer.RangeAssignor #分组消费再平衡策略 默认采用的是这种再平衡方式，这种方式分配只是针对消费者订阅的topic的单个topic所有分区再分配
  partitionAssignmentStrategy: org.apache.kafka.clients.consumer.RoundRobinAssignor #分组消费再平衡策略 这种分配策略是针对消费者消费的所有topic的所有分区进行分配。

  keySerializer: org.apache.kafka.common.serialization.StringSerializer
  valueSerializer: org.apache.kafka.common.serialization.StringSerializer
  retries: 0 #配置发送消息失败重试
  batchSize: 10241 #配置批量处理消息大小
  lingerMs: 5 #配置批量处理数据延迟
  bufferMemory: 1234321 #配置内存缓冲大小

spring:
  datasource:
    url: jdbc:mysql://192.168.1.102:3306/shizhan_kafka?serverTimezone=UTC&useUnicode=true&characterEncoding=utf8&useSSL=false
    username: root
    password: MyNewPass4!
    driver-class-name: com.mysql.jdbc.Driver

server:
  port: 9092

logging:
  file: kafka.log
  level:
    org.zxl.shizhan.kafka: debug
    org.springframework.jdbc.core.JdbcTemplate: debug